// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_USER_USERS_H_
#define FLATBUFFERS_GENERATED_USER_USERS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 3 &&
              FLATBUFFERS_VERSION_REVISION == 3,
             "Non-compatible flatbuffers version included");

namespace users {

struct User;
struct UserBuilder;

struct User FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef UserBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ID = 6
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  uint64_t id() const {
    return GetField<uint64_t>(VT_ID, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint64_t>(verifier, VT_ID, 8) &&
           verifier.EndTable();
  }
};

struct UserBuilder {
  typedef User Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(User::VT_NAME, name);
  }
  void add_id(uint64_t id) {
    fbb_.AddElement<uint64_t>(User::VT_ID, id, 0);
  }
  explicit UserBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<User> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<User>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<User> CreateUser(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    uint64_t id = 0) {
  UserBuilder builder_(_fbb);
  builder_.add_id(id);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<User> CreateUserDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint64_t id = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return users::CreateUser(
      _fbb,
      name__,
      id);
}

inline const users::User *GetUser(const void *buf) {
  return ::flatbuffers::GetRoot<users::User>(buf);
}

inline const users::User *GetSizePrefixedUser(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<users::User>(buf);
}

inline bool VerifyUserBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<users::User>(nullptr);
}

inline bool VerifySizePrefixedUserBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<users::User>(nullptr);
}

inline void FinishUserBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<users::User> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedUserBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<users::User> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace users

#endif  // FLATBUFFERS_GENERATED_USER_USERS_H_
