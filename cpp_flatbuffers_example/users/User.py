# automatically generated by the FlatBuffers compiler, do not modify

# namespace: users

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class User(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = User()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsUser(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # User
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # User
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # User
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

def UserStart(builder): builder.StartObject(2)
def Start(builder):
    return UserStart(builder)
def UserAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return UserAddName(builder, name)
def UserAddId(builder, id): builder.PrependUint64Slot(1, id, 0)
def AddId(builder, id):
    return UserAddId(builder, id)
def UserEnd(builder): return builder.EndObject()
def End(builder):
    return UserEnd(builder)