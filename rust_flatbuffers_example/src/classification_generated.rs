// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod dnn_vision {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum GeneralClassificationOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct GeneralClassification<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for GeneralClassification<'a> {
  type Inner = GeneralClassification<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> GeneralClassification<'a> {
  pub const VT_CLASS_ID: flatbuffers::VOffsetT = 4;
  pub const VT_SCORE: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    GeneralClassification { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args GeneralClassificationArgs
  ) -> flatbuffers::WIPOffset<GeneralClassification<'bldr>> {
    let mut builder = GeneralClassificationBuilder::new(_fbb);
    builder.add_score(args.score);
    builder.add_class_id(args.class_id);
    builder.finish()
  }


  #[inline]
  pub fn class_id(&self) -> u32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u32>(GeneralClassification::VT_CLASS_ID, Some(0)).unwrap()}
  }
  #[inline]
  pub fn score(&self) -> f32 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<f32>(GeneralClassification::VT_SCORE, Some(0.0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for GeneralClassification<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u32>("class_id", Self::VT_CLASS_ID, false)?
     .visit_field::<f32>("score", Self::VT_SCORE, false)?
     .finish();
    Ok(())
  }
}
pub struct GeneralClassificationArgs {
    pub class_id: u32,
    pub score: f32,
}
impl<'a> Default for GeneralClassificationArgs {
  #[inline]
  fn default() -> Self {
    GeneralClassificationArgs {
      class_id: 0,
      score: 0.0,
    }
  }
}

pub struct GeneralClassificationBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> GeneralClassificationBuilder<'a, 'b> {
  #[inline]
  pub fn add_class_id(&mut self, class_id: u32) {
    self.fbb_.push_slot::<u32>(GeneralClassification::VT_CLASS_ID, class_id, 0);
  }
  #[inline]
  pub fn add_score(&mut self, score: f32) {
    self.fbb_.push_slot::<f32>(GeneralClassification::VT_SCORE, score, 0.0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> GeneralClassificationBuilder<'a, 'b> {
    let start = _fbb.start_table();
    GeneralClassificationBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<GeneralClassification<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for GeneralClassification<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("GeneralClassification");
      ds.field("class_id", &self.class_id());
      ds.field("score", &self.score());
      ds.finish()
  }
}
pub enum ClassificationDataOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ClassificationData<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClassificationData<'a> {
  type Inner = ClassificationData<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ClassificationData<'a> {
  pub const VT_CLASSIFICATION_LIST: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ClassificationData { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ClassificationDataArgs<'args>
  ) -> flatbuffers::WIPOffset<ClassificationData<'bldr>> {
    let mut builder = ClassificationDataBuilder::new(_fbb);
    if let Some(x) = args.classification_list { builder.add_classification_list(x); }
    builder.finish()
  }


  #[inline]
  pub fn classification_list(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GeneralClassification<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GeneralClassification>>>>(ClassificationData::VT_CLASSIFICATION_LIST, None)}
  }
}

impl flatbuffers::Verifiable for ClassificationData<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<GeneralClassification>>>>("classification_list", Self::VT_CLASSIFICATION_LIST, false)?
     .finish();
    Ok(())
  }
}
pub struct ClassificationDataArgs<'a> {
    pub classification_list: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<GeneralClassification<'a>>>>>,
}
impl<'a> Default for ClassificationDataArgs<'a> {
  #[inline]
  fn default() -> Self {
    ClassificationDataArgs {
      classification_list: None,
    }
  }
}

pub struct ClassificationDataBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClassificationDataBuilder<'a, 'b> {
  #[inline]
  pub fn add_classification_list(&mut self, classification_list: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<GeneralClassification<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(ClassificationData::VT_CLASSIFICATION_LIST, classification_list);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClassificationDataBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClassificationDataBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClassificationData<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ClassificationData<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ClassificationData");
      ds.field("classification_list", &self.classification_list());
      ds.finish()
  }
}
pub enum ClassificationTopOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct ClassificationTop<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for ClassificationTop<'a> {
  type Inner = ClassificationTop<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> ClassificationTop<'a> {
  pub const VT_PERCEPTION: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    ClassificationTop { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ClassificationTopArgs<'args>
  ) -> flatbuffers::WIPOffset<ClassificationTop<'bldr>> {
    let mut builder = ClassificationTopBuilder::new(_fbb);
    if let Some(x) = args.perception { builder.add_perception(x); }
    builder.finish()
  }


  #[inline]
  pub fn perception(&self) -> Option<ClassificationData<'a>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<ClassificationData>>(ClassificationTop::VT_PERCEPTION, None)}
  }
}

impl flatbuffers::Verifiable for ClassificationTop<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<ClassificationData>>("perception", Self::VT_PERCEPTION, false)?
     .finish();
    Ok(())
  }
}
pub struct ClassificationTopArgs<'a> {
    pub perception: Option<flatbuffers::WIPOffset<ClassificationData<'a>>>,
}
impl<'a> Default for ClassificationTopArgs<'a> {
  #[inline]
  fn default() -> Self {
    ClassificationTopArgs {
      perception: None,
    }
  }
}

pub struct ClassificationTopBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ClassificationTopBuilder<'a, 'b> {
  #[inline]
  pub fn add_perception(&mut self, perception: flatbuffers::WIPOffset<ClassificationData<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<ClassificationData>>(ClassificationTop::VT_PERCEPTION, perception);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ClassificationTopBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ClassificationTopBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<ClassificationTop<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for ClassificationTop<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("ClassificationTop");
      ds.field("perception", &self.perception());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `ClassificationTop`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_classification_top_unchecked`.
pub fn root_as_classification_top(buf: &[u8]) -> Result<ClassificationTop, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<ClassificationTop>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `ClassificationTop` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_classification_top_unchecked`.
pub fn size_prefixed_root_as_classification_top(buf: &[u8]) -> Result<ClassificationTop, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<ClassificationTop>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `ClassificationTop` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_classification_top_unchecked`.
pub fn root_as_classification_top_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ClassificationTop<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<ClassificationTop<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `ClassificationTop` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_classification_top_unchecked`.
pub fn size_prefixed_root_as_classification_top_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<ClassificationTop<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<ClassificationTop<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a ClassificationTop and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `ClassificationTop`.
pub unsafe fn root_as_classification_top_unchecked(buf: &[u8]) -> ClassificationTop {
  flatbuffers::root_unchecked::<ClassificationTop>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed ClassificationTop and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `ClassificationTop`.
pub unsafe fn size_prefixed_root_as_classification_top_unchecked(buf: &[u8]) -> ClassificationTop {
  flatbuffers::size_prefixed_root_unchecked::<ClassificationTop>(buf)
}
#[inline]
pub fn finish_classification_top_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<ClassificationTop<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_classification_top_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<ClassificationTop<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod dnn_vision

